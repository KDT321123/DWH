PROCEDURE "BL.DI.Procedures.S4::P_ZFM_SAC_FII006"(  IN IV_GJAHR   NVARCHAR(4),
                                                    IN IV_POPER   NVARCHAR(2)
                                                 )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
  
  DECLARE V_GJAHR NVARCHAR(4);
  DECLARE V_POPER NVARCHAR(2);
  
  --生产系统上线年月
  DECLARE V_MIN_GJAHR NVARCHAR(4) DEFAULT '2023';
  DECLARE V_MIN_POPER NVARCHAR(2) DEFAULT '01';
  
  DECLARE V_NUM INTEGER;
  DECLARE V_INDEX INTEGER DEFAULT 1;
  DECLARE V_SYSTEM NVARCHAR(20);
  DECLARE V_OBJECT NVARCHAR(150);
  DECLARE V_START_TIME TIMESTAMP;
  DECLARE V_END_TIME TIMESTAMP;
  DECLARE V_RUN_TIMES INTEGER;
  DECLARE V_RECORDS INTEGER;
  DECLARE V_STATUS NVARCHAR(2);
  
  DECLARE V_MESSAGE NVARCHAR(255);
  DECLARE V_TYPE NVARCHAR(1);
  
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    
    ROLLBACK;
    
    V_END_TIME := UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing');
    V_RUN_TIMES := SECONDS_BETWEEN(:V_START_TIME, :V_END_TIME);
    V_MESSAGE := CAST(::SQL_ERROR_MESSAGE AS NVARCHAR(5000));
    
    INSERT INTO "BL.DI.Tables.S4::T_DI_LOG"(SYSTEM, OBJECT, START_TIME, END_TIME, RUN_TIMES, GJAHR, POPER, RECORDS, STATUS, MESSAGE)
    VALUES(:V_SYSTEM, :V_OBJECT, :V_START_TIME, :V_END_TIME, :V_RUN_TIMES, :V_GJAHR, :V_POPER, 0, 'F', :V_MESSAGE);
    
  END;
  
  V_SYSTEM := 'S4';
  V_OBJECT := 'ZFM_SAC_FII006';
  
  V_GJAHR := CASE WHEN :IV_GJAHR IS NULL OR :IV_POPER IS NULL THEN NULL ELSE :IV_GJAHR END;
  V_POPER := CASE WHEN :IV_GJAHR IS NULL OR :IV_POPER IS NULL THEN NULL ELSE :IV_POPER END; 
  
  LT_SECTION_DELTA =
  SELECT IFNULL(:V_GJAHR, IFNULL(TO_NVARCHAR(NEXT_DATE, 'YYYY'), :V_MIN_GJAHR)) AS GJAHR,
         IFNULL(:V_POPER, IFNULL(TO_NVARCHAR(NEXT_DATE, 'MM'), :V_MIN_POPER)) AS POPER
    FROM ( SELECT ADD_MONTHS(TO_DATE(MAX(BDATJ) || RIGHT(MAX(MAP(POPER, '013', '012', POPER)), 2) || '01', 'YYYYMMDD'), 1) AS NEXT_DATE
             FROM "BL.DI.Tables.S4::T_ZFM_SAC_FII006"
            WHERE BDATJ IN (SELECT MAX(BDATJ) AS BDATJ FROM "BL.DI.Tables.S4::T_ZFM_SAC_FII006")
         );
  
  LT_SECTION_LIST =
  SELECT LIST.YEAR,
         LIST.MONTH
    FROM "BL.DI.Tables.S4::T_TIME_DIMENSION_MONTH" AS LIST,
         :LT_SECTION_DELTA AS DELTA
   WHERE ((:V_GJAHR IS NULL AND (LIST.YEAR > DELTA.GJAHR OR (LIST.YEAR = DELTA.GJAHR AND LIST.MONTH >= DELTA.POPER))) OR
          (:V_GJAHR IS NOT NULL AND LIST.YEAR = DELTA.GJAHR AND LIST.MONTH = DELTA.POPER)
         )
     AND LIST.CALMONTH < TO_NVARCHAR(TO_DATE(UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing')), 'YYYYMM');
  
  SELECT COUNT(1) AS NUM INTO V_NUM FROM :LT_SECTION_LIST;
  IF :V_NUM = 0 THEN
    
    V_GJAHR := :LT_SECTION_DELTA.GJAHR[1];
    V_POPER := :LT_SECTION_DELTA.POPER[1];
    INSERT INTO "BL.DI.Tables.S4::T_DI_LOG"(SYSTEM, OBJECT, START_TIME, END_TIME, RUN_TIMES, GJAHR, POPER, RECORDS, STATUS, MESSAGE)
    VALUES(:V_SYSTEM, :V_OBJECT, UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing'), UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing'), 0, :V_GJAHR, :V_POPER, 0, 'S', '无增量数据');
    
  ELSE
    
    LT_PLANT_LIST =
    SELECT SIGN,
           OPTION,
           LOW,
           HIGH
      FROM "BL.DI.Tables.S4::T_WERKS";
    
    LT_BKLAS_LIST =
    SELECT CAST('' AS NVARCHAR(1)) AS SIGN,
           CAST('' AS NVARCHAR(2)) AS OPTION,
           CAST('' AS NVARCHAR(4)) AS LOW,
           CAST('' AS NVARCHAR(4)) AS HIGH
      FROM "BL.DI.Synonyms.S4::Dummy";
    
    LT_MATKL_LIST =
    SELECT CAST('' AS NVARCHAR(1)) AS SIGN,
           CAST('' AS NVARCHAR(2)) AS OPTION,
           CAST('' AS NVARCHAR(9)) AS LOW,
           CAST('' AS NVARCHAR(9)) AS HIGH
      FROM "BL.DI.Tables.S4::T_WERKS"
     WHERE 1 <> 1;
    
    WHILE :V_INDEX <= :V_NUM DO
      
      V_START_TIME := UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing');
      V_GJAHR := :LT_SECTION_LIST.YEAR[:V_INDEX];
      V_POPER := :LT_SECTION_LIST.MONTH[:V_INDEX];
      
      CALL "BL.DI.VirtualProcedure::V_ZFM_SAC_FII006"( IR_BKLAS => :LT_BKLAS_LIST,
                                                       IR_MATKL => :LT_MATKL_LIST,
                                                       IR_WERKS => :LT_PLANT_LIST,
                                                       IV_BDATJ => :V_GJAHR,
                                                       IV_CURTP => '10',
                                                       IV_POPER => LPAD(:V_POPER, 3, '0'),
                                                       ET_OUTPUT => LT_RESULT,
                                                       EV_MESSAGE => V_MESSAGE,
                                                       EV_TYPE => V_TYPE
                                                     );
      
      SELECT COUNT(1) AS NUM INTO V_RECORDS FROM :LT_RESULT;
      V_END_TIME := UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing');
      V_RUN_TIMES := SECONDS_BETWEEN(:V_START_TIME, :V_END_TIME);
      V_STATUS := :V_TYPE;
      
      INSERT INTO "BL.DI.Tables.S4::T_DI_LOG"(SYSTEM, OBJECT, START_TIME, END_TIME, RUN_TIMES, GJAHR, POPER, RECORDS, STATUS, MESSAGE)
      VALUES(:V_SYSTEM, :V_OBJECT, :V_START_TIME, :V_END_TIME, :V_RUN_TIMES, :V_GJAHR, :V_POPER, :V_RECORDS, :V_STATUS, :V_MESSAGE);
      IF :V_STATUS = 'S' THEN
        
        DELETE FROM "BL.DI.Tables.S4::T_ZFM_SAC_FII006" WHERE BDATJ = :V_GJAHR AND POPER = LPAD(:V_POPER, 3, '0');
        INSERT INTO "BL.DI.Tables.S4::T_ZFM_SAC_FII006" SELECT * FROM :LT_RESULT;
        
      END IF;
      
      COMMIT;
      
      V_INDEX := :V_INDEX + 1;
      
    END WHILE;
    
  END IF;
  
END;

/*
PROCEDURE "BL.DI.Procedures.S4::P_ZFM_SAC_FII006"(  IN IV_GJAHR   NVARCHAR(4),
                                                    IN IV_POPER   NVARCHAR(2)
                                                 )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
  
  DECLARE V_GJAHR NVARCHAR(4);
  DECLARE V_POPER NVARCHAR(2);
  
  --生产系统上线年月
  DECLARE V_MIN_GJAHR NVARCHAR(4) DEFAULT '2023';
  DECLARE V_MIN_POPER NVARCHAR(2) DEFAULT '01';
  
  DECLARE V_NUM INTEGER;
  DECLARE V_INDEX INTEGER DEFAULT 1;
  DECLARE V_SYSTEM NVARCHAR(20);
  DECLARE V_OBJECT NVARCHAR(150);
  DECLARE V_START_TIME TIMESTAMP;
  DECLARE V_END_TIME TIMESTAMP;
  DECLARE V_RUN_TIMES INTEGER;
  DECLARE V_RECORDS INTEGER;
  DECLARE V_STATUS NVARCHAR(2);
  
  DECLARE V_MESSAGE NVARCHAR(5000);
  DECLARE V_TYPE NVARCHAR(1);
  
  DECLARE V_BATCH_NUM INTEGER DEFAULT 5;
  DECLARE V_TOTAL_NUM INTEGER;
  DECLARE V_TIMES INTEGER;
  DECLARE V_TABIX INTEGER DEFAULT 0;
  DECLARE V_OFFSET INTEGER;
  
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    
    ROLLBACK;
    
    V_END_TIME := UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing');
    V_RUN_TIMES := SECONDS_BETWEEN(:V_START_TIME, :V_END_TIME);
    V_MESSAGE := CAST(::SQL_ERROR_MESSAGE AS NVARCHAR(5000));
    
    INSERT INTO "BL.DI.Tables.S4::T_DI_LOG"(SYSTEM, OBJECT, START_TIME, END_TIME, RUN_TIMES, GJAHR, POPER, RECORDS, STATUS, MESSAGE)
    VALUES(:V_SYSTEM, :V_OBJECT, :V_START_TIME, :V_END_TIME, :V_RUN_TIMES, :V_GJAHR, :V_POPER, 0, 'F', :V_MESSAGE);
    
  END;
  
  V_SYSTEM := 'S4';
  V_OBJECT := 'ZFM_SAC_FII006';
  
  V_GJAHR := CASE WHEN :IV_GJAHR IS NULL OR :IV_POPER IS NULL THEN NULL ELSE :IV_GJAHR END;
  V_POPER := CASE WHEN :IV_GJAHR IS NULL OR :IV_POPER IS NULL THEN NULL ELSE :IV_POPER END; 
  
  LT_SECTION_DELTA =
  SELECT IFNULL(:V_GJAHR, IFNULL(TO_NVARCHAR(NEXT_DATE, 'YYYY'), :V_MIN_GJAHR)) AS GJAHR,
         IFNULL(:V_POPER, IFNULL(TO_NVARCHAR(NEXT_DATE, 'MM'), :V_MIN_POPER)) AS POPER
    FROM ( SELECT ADD_MONTHS(TO_DATE(MAX(BDATJ) || RIGHT(MAX(POPER), 2) || '01', 'YYYYMMDD'), 1) AS NEXT_DATE
             FROM "BL.DI.Tables.S4::T_ZFM_SAC_FII006"
            WHERE BDATJ IN (SELECT MAX(BDATJ) AS BDATJ FROM "BL.DI.Tables.S4::T_ZFM_SAC_FII006")
         );
  
  LT_SECTION_LIST =
  SELECT LIST.YEAR,
         LIST.MONTH
    FROM "BL.DI.Tables.S4::T_TIME_DIMENSION_MONTH" AS LIST,
         :LT_SECTION_DELTA AS DELTA
   WHERE ((:V_GJAHR IS NULL AND (LIST.YEAR > DELTA.GJAHR OR (LIST.YEAR = DELTA.GJAHR AND LIST.MONTH >= DELTA.POPER))) OR
          (:V_GJAHR IS NOT NULL AND LIST.YEAR = DELTA.GJAHR AND LIST.MONTH = DELTA.POPER)
         )
     AND LIST.CALMONTH < TO_NVARCHAR(TO_DATE(UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing')), 'YYYYMM');
  
  SELECT COUNT(1) AS NUM INTO V_NUM FROM :LT_SECTION_LIST;
  IF :V_NUM = 0 THEN
    
    V_GJAHR := :LT_SECTION_DELTA.GJAHR[1];
    V_POPER := :LT_SECTION_DELTA.POPER[1];
    INSERT INTO "BL.DI.Tables.S4::T_DI_LOG"(SYSTEM, OBJECT, START_TIME, END_TIME, RUN_TIMES, GJAHR, POPER, RECORDS, STATUS, MESSAGE)
    VALUES(:V_SYSTEM, :V_OBJECT, UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing'), UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing'), 0, :V_GJAHR, :V_POPER, 0, 'S', '无增量数据');
    
  ELSE
    
    LT_PLANT_LIST =
    SELECT SIGN,
           OPTION,
           LOW,
           HIGH
      FROM "BL.DI.Tables.S4::T_WERKS";
    
    SELECT COUNT(1) AS NUM INTO V_TOTAL_NUM FROM :LT_PLANT_LIST;
    V_TIMES := ROUND( V_TOTAL_NUM / V_BATCH_NUM, 0, ROUND_UP);
    
    WHILE :V_INDEX <= :V_NUM DO
      
      V_START_TIME := UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing');
      V_GJAHR := :LT_SECTION_LIST.YEAR[:V_INDEX];
      V_POPER := :LT_SECTION_LIST.MONTH[:V_INDEX];
      
      V_TABIX := 0;
      WHILE :V_TABIX < :V_TIMES DO
        
        V_OFFSET := :V_BATCH_NUM * :V_TABIX;
        LT_PLANT_TEMP = SELECT * FROM :LT_PLANT_LIST LIMIT :V_BATCH_NUM OFFSET :V_OFFSET;
        
        CALL "BL.DI.VirtualProcedure::V_ZFM_SAC_FII006"( IR_WERKS => :LT_PLANT_TEMP,
                                                         IV_BDATJ => :V_GJAHR,
                                                         IV_CURTP => '10',
                                                         IV_POPER => LPAD(:V_POPER, 3, '0'),
                                                         ET_OUTPUT => LT_RESULT,
                                                         EV_MESSAGE => V_MESSAGE,
                                                         EV_TYPE => V_TYPE
                                                       );
        
        IF :V_TYPE = 'E' THEN
          
          BREAK;
          
        END IF;
        
        IF :V_TABIX = 0 THEN
          
          LT_RESULT_ALL = SELECT * FROM :LT_RESULT;
          
        ELSE
          
          LT_RESULT_ALL =
          SELECT * FROM :LT_RESULT_ALL
           UNION ALL
          SELECT * FROM :LT_RESULT;
          
        END IF;
        
        V_TABIX := :V_TABIX + 1;
        
      END WHILE;
      
      SELECT COUNT(1) AS NUM INTO V_RECORDS FROM :LT_RESULT_ALL;
      V_END_TIME := UTCTOLOCAL(CURRENT_TIMESTAMP, 'Asia/Beijing');
      V_RUN_TIMES := SECONDS_BETWEEN(:V_START_TIME, :V_END_TIME);
      V_STATUS := :V_TYPE;
      
      INSERT INTO "BL.DI.Tables.S4::T_DI_LOG"(SYSTEM, OBJECT, START_TIME, END_TIME, RUN_TIMES, GJAHR, POPER, RECORDS, STATUS, MESSAGE)
      VALUES(:V_SYSTEM, :V_OBJECT, :V_START_TIME, :V_END_TIME, :V_RUN_TIMES, :V_GJAHR, :V_POPER, :V_RECORDS, :V_STATUS, :V_MESSAGE);
      IF :V_STATUS <> 'E' THEN
        
        DELETE FROM "BL.DI.Tables.S4::T_ZFM_SAC_FII006" WHERE BDATJ = :V_GJAHR AND POPER = LPAD(:V_POPER, 3, '0');
        INSERT INTO "BL.DI.Tables.S4::T_ZFM_SAC_FII006" SELECT * FROM :LT_RESULT_ALL;
        
      END IF;
      
      COMMIT;
      
      V_INDEX := :V_INDEX + 1;
      
    END WHILE;
    
  END IF;
  
END;
*/